
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { v4 as uuidv4 } from 'uuid';

const SUPABASE_URL = "https://lwysmywblcsmgxvzkqka.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imx3eXNteXdibGNzbWd4dnprcWthIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM4NTE2MzksImV4cCI6MjA1OTQyNzYzOX0.NhK5JBAU2rNvI_MExoVXflNIZv6Ze6A7ZaN0kY8DGTU";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    fetch: (url: string, options?: RequestInit) => {
      console.log(`Supabase Request: ${options?.method || 'GET'} ${url}`);
      return fetch(url, options).then(res => {
        console.log(`Supabase API Response: ${res.status} for ${res.url}`);
        // Log response body for debugging if there's an error
        if (res.status >= 400) {
          return res.clone().text().then(body => {
            console.error(`Error response body: ${body}`);
            return res;
          });
        }
        return res;
      });
    },
  },
});

console.log("Supabase client initialized with URL:", SUPABASE_URL);

// Add automatic retry for network-related issues
supabase.channel('custom').on('system', { event: 'reconnect' }, () => {
  console.log('Reconnecting to Supabase...');
}).subscribe();

// Verify connectivity and print number of verification records
async function checkVerificationRecords() {
  try {
    console.log("Checking verification records in Supabase...");
    
    // First check total count
    const { count, error: countError } = await supabase
      .from('verifications')
      .select('*', { count: 'exact', head: true });
      
    if (countError) {
      console.error('Failed to count verification records:', countError.message);
      // Try to get more detailed error information
      if (countError.code) {
        console.error('Error code:', countError.code);
      }
      return;
    }
    
    console.log(`Found ${count} total verification records in database.`);
    
    // Then check pending count specifically
    const { count: pendingCount, error: pendingError } = await supabase
      .from('verifications')
      .select('*', { count: 'exact', head: true })
      .eq('status', 'pending');
      
    if (pendingError) {
      console.error('Failed to count pending verification records:', pendingError.message);
      return;
    }
    
    console.log(`Found ${pendingCount} pending verification records in database.`);
    
    // Get a sample record to debug data structure
    const { data: sampleData, error: sampleError } = await supabase
      .from('verifications')
      .select('*')
      .limit(1);
      
    if (sampleError) {
      console.error('Failed to fetch sample verification record:', sampleError.message);
      return;
    }
    
    if (sampleData && sampleData.length > 0) {
      console.log('Sample verification record structure:', JSON.stringify(sampleData[0], null, 2));
    } else {
      console.log('No verification records found to sample.');
      
      // Create a test record if no records exist - Using proper UUID format
      console.log('Creating a test verification record for debugging...');
      const testRecord = {
        status: 'pending',
        document_hash: 'test-hash-123456789',
        user_id: uuidv4(), // Generate a proper UUID
        document_path: JSON.stringify({ 
          personalInfo: { 
            fullName: 'Test User', 
            email: 'test@example.com',
            dateOfBirth: '1990-01-01',
            nationality: 'United States',
            address: '123 Test St, Test City' 
          } 
        }),
        wallet_address: '0x1234567890abcdef1234567890abcdef12345678',
        signature: 'test-signature-123'
      };
      
      const { data, error } = await supabase.from('verifications').insert(testRecord).select();
      
      if (error) {
        console.error('Failed to create test record:', error.message);
        console.error('Error details:', error);
      } else {
        console.log('Test record created successfully!', data);
      }
    }
  } catch (error) {
    console.error('Error checking verification records:', error);
  }
}

// Run the check immediately
checkVerificationRecords();

// Export a function to manually verify connection
export const verifySupabaseConnection = checkVerificationRecords;

// Create a helper function to create a new verification record
export const createVerification = async (verificationData: {
  status: "pending" | "verified" | "rejected";
  document_hash: string;
  user_id: string;
  document_path: string | object;
  wallet_address: string;
  signature: string;
}) => {
  // If document_path is an object, stringify it
  const finalData = {
    ...verificationData,
    document_path: typeof verificationData.document_path === 'object' 
      ? JSON.stringify(verificationData.document_path) 
      : verificationData.document_path
  };
  
  const { data, error } = await supabase.from('verifications').insert(finalData).select();
  
  if (error) {
    console.error('Error creating verification record:', error);
    throw error;
  }
  
  return data;
};

// Helper function to update verification status
export const updateVerificationStatus = async (id: string, status: "verified" | "rejected" | "pending") => {
  console.log(`Updating verification status in database: ID ${id} to ${status}`);
  
  const { data, error } = await supabase
    .from('verifications')
    .update({ status })
    .eq('id', id)
    .select();

  if (error) {
    console.error("Error updating verification status:", error);
    throw error;
  }
  
  console.log("Verification status updated successfully:", data);
  return data;
};

// Ensure that we refresh properly and fetch all records
export const getAllVerifications = async () => {
  // Call this with no filters to get ALL verifications
  const { data, error } = await supabase
    .from('verifications')
    .select('*')
    .order('created_at', { ascending: false });
    
  if (error) {
    console.error('Error fetching all verifications:', error);
    throw error;
  }
  
  console.log('Fetched verification records:', data?.length || 0);
  return data || [];
};

// Get verifications for a specific user
export const getUserVerifications = async (userId: string) => {
  const { data, error } = await supabase
    .from('verifications')
    .select('*')
    .eq('user_id', userId)
    .order('created_at', { ascending: false });
    
  if (error) {
    console.error(`Error fetching verifications for user ${userId}:`, error);
    throw error;
  }
  
  return data || [];
};

// Get verification by ID
export const getVerificationById = async (id: string) => {
  const { data, error } = await supabase
    .from('verifications')
    .select('*')
    .eq('id', id)
    .single();
    
  if (error) {
    console.error(`Error fetching verification with ID ${id}:`, error);
    throw error;
  }
  
  return data;
};

// Force refresh all data in the client
export const refreshSupabaseData = async () => {
  console.log("Forcing refresh of Supabase data...");
  try {
    await checkVerificationRecords();
    const data = await getAllVerifications();
    console.log(`Refreshed Supabase data: found ${data.length} records`);
    return data;
  } catch (error) {
    console.error("Error refreshing Supabase data:", error);
    throw error;
  }
};
